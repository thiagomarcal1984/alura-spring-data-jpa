Criação de um novo projeto Spring: https://start.spring.io/
Project Metadata:
    group: br.com.alura
    artifact: spring-data
    package-name br.com.alura.spring.data (sem o hifen)
    packaging: jar (não war)
    dependencies: Spring Data JPA (apenas)
    
Procure no MVN Repository por MariaDB Java Client e coloque a dependência no
arquivo pom.xml.

O arquivo src/main/resources/application.properties contém as configurações
necessárias para que a aplicação Spring se comunique com o database.

Comando do plugin Spring Boot no Maven:
    mvn spring-boot:run     (impede a execução de outros goals do Maven.)
    mvn spring-boot:start   (não impede a execução de outros goals do Maven.)

Arquitetura do Spring Data (do mais abstrato para o mais concreto):
    SpringData -> JPA -> Hibernate -> JDBC -> Driver 

Após a criação de uma entidade, rode a aplicação e verifique as tabelas criadas
pelo Spring Data JPA (no curso usamos o DBeaver para ver o banco):
    mvn spring-boot:run

Comparado com o JPA, o Spring Data já deixa pronto os repositórios, sem 
necessidade de criar EntityManagerFactory, EntityManager, transações etc. Basta
implementar uma das interfaces Repository do Spring Data. Neste exemplo, usamos
a interface CrudRepository na interface CargoRepository.

Nota: o código main não está funcionando com esta declaração de CargoRepository:
    public interface CargoRepository extends CrudRepository { ... }
    
    // Voltou a funcionar depois que defini parâmetros para CrudRepository:
    public interface CargoRepository extends CrudRepository<Cargo,Integer>{...}

A Classe SpringDataApplication (a que contém o método main) precisa implementar
a interface CommandLineRunner para executar outros comandos além do 
carregamento do Spring.

O Spring usa muito a injeção de dependência.
Para injetar um repositório, é necessário criar um construtor que use o 
repositório desejado com o parâmetro:
	private final CargoRepository repository;

	public SpringDataApplication(CargoRepository repository){
		this.repository = repository;
	}

Outra forma de injetar o repositório é usando a anotação @Autowired na 
propriedade privada (ela não pode ser final):
	@Autowired
	private CargoRepository repository;

A anotação @Service é usada para que o Spring reconheça a classe anotada.
Sem essa anotação, a classe principal do Spring não consegue usar a classe
anotada, mesmo que válida.

O método save do CrudRepository serve tanto para CREATE quanto para UPDATE.

Qual a finalidade de utilizarmos o Optional retornado pelo método findById?
O findById sempre devolve um Optional, que sabe se o elemento existe ou não. 
Assim, não precisamos lidar com null ou tratar uma exceção.

Alternativa para input: ao invés de Scanner scanner.next(), use 
System.console().readline();

Como criar Query Methods nos repositórios do Spring Data: 
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation

Acrescente na assinatura da interface o método com a sintaxe:
    List<Classe> findBy<Propriedade1><?Keyword><?And/Or><Propriedade2><?Keyword>

    Ex.: 
        List<Funcionario> findByNome(String nome);
        List<Funcionario> findByNomeContaining(String nome);

Usando as derived queries pode ter como consequência métodos com nomes muito 
extensos. Uma alternativa às derived queries (métodos de consulta derivados
das propriedades das classes) é anotar o método com Query e inserir um JPQL:

    @Query(
        "SELECT f FROM Funcionario f "
        + "WHERE f.nome = :nome "
        + "AND f.salario = :salario "
        + "AND f.dataContratacao = :data"
    )
    List<Funcionario> findNomeSalarioMaiorDataContratacao(
        String nome, BigDecimal salario, LocalDate data);

Por padrão, as consultas dentro da anotação são consideradas JPQL. Se você 
quiser que a consulta seja considerada SQL nativo, precisamos do parâmetro 
native = true:
    @Query(
        value = "SELECT * FROM funcionarios f "
                + "WHERE f.data_contratacao >= :data;",
        nativeQuery = true
    )
    List<Funcionario> findDataContratacaoMaior(LocalDate data);

Paginação: há dois objetos que são gerados a partir de repositórios da classe
PagingAndSortingRepository: Pageable e Page.

    Pageable é uma classe que determina como será feita a consulta ao 
    repositório: página (base zero), tamanho por página e ordenação.

    Page<T> é o objeto resultante da busca em um PagingAndSortingRepository.
    Esse objeto tem métodos para controlar a paginação (total de elementos,
    de páginas, página atual etc.).

Alguns repositórios de destaque no Spring Data:
    CrudRepository (com funções de CRUD)
    PagingAndSortingRepository (para paginação)
    * ReactiveCrudRepository (usada para programação funcional)
    * JpaRepository (usada para arquivos em lote)

* Repositories não tão usadas assim.
