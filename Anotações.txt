Criação de um novo projeto Spring: https://start.spring.io/
Project Metadata:
    group: br.com.alura
    artifact: spring-data
    package-name br.com.alura.spring.data (sem o hifen)
    packaging: jar (não war)
    dependencies: Spring Data JPA (apenas)
    
Procure no MVN Repository por MariaDB Java Client e coloque a dependência no
arquivo pom.xml.

O arquivo src/main/resources/application.properties contém as configurações
necessárias para que a aplicação Spring se comunique com o database.

Comando do plugin Spring Boot no Maven:
    mvn spring-boot:run     (impede a execução de outros goals do Maven.)
    mvn spring-boot:start   (não impede a execução de outros goals do Maven.)

Arquitetura do Spring Data (do mais abstrato para o mais concreto):
    SpringData -> JPA -> Hibernate -> JDBC -> Driver 

Após a criação de uma entidade, rode a aplicação e verifique as tabelas criadas
pelo Spring Data JPA (no curso usamos o DBeaver para ver o banco):
    mvn spring-boot:run

Comparado com o JPA, o Spring Data já deixa pronto os repositórios, sem 
necessidade de criar EntityManagerFactory, EntityManager, transações etc. Basta
implementar uma das interfaces Repository do Spring Data. Neste exemplo, usamos
a interface CrudRepository na interface CargoRepository.

Nota: o código main não está funcionando com esta declaração de CargoRepository:
    public interface CargoRepository extends CrudRepository { ... }
    
    // Voltou a funcionar depois que defini parâmetros para CrudRepository:
    public interface CargoRepository extends CrudRepository<Cargo,Integer>{...}

A Classe SpringDataApplication (a que contém o método main) precisa implementar
a interface CommandLineRunner para executar outros comandos além do 
carregamento do Spring.

O Spring usa muito a injeção de dependência.
Para injetar um repositório, é necessário criar um construtor que use o 
repositório desejado com o parâmetro:
	private final CargoRepository repository;

	public SpringDataApplication(CargoRepository repository){
		this.repository = repository;
	}

Outra forma de injetar o repositório é usando a anotação @Autowired na 
propriedade privada (ela não pode ser final):
	@Autowired
	private CargoRepository repository;
